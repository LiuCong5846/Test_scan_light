{
  "ver": "1.0.23",
  "uuid": "2453fccd-b857-421a-8508-8f90a9151515",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvarying vec4 v_color;\n\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n\nuniform vec4 lightColor;\nuniform vec2 lightCenterPoint;\nuniform float lightAngle;\nuniform float lightWidth;\nuniform float enableGradient;\nuniform float cropAlpha;\nuniform float cropNotLight;\nuniform float enableMixColor;\n\n/*\n添加光束\n*/\nvec4 addLight(vec4 textureColor, vec4 lightColor, vec2 lightCenterPoint, vec2 uv, float lightAngle, float lightWidth) {\n\n  float angleInRadians = radians(lightAngle);\n\n  float dis = 0.0;\n  if (mod(lightAngle, 180.0) != 0.0) {\n\n    float lightOffsetX = lightCenterPoint.x - ((1.0 - lightCenterPoint.y) / tan(angleInRadians));\n\n    float dx = lightOffsetX + (1.0 - uv.y) / tan(angleInRadians);\n\n    float offsetDis = abs(uv.x - dx);\n\n    dis = sin(angleInRadians) * offsetDis;\n  } else {\n    dis = abs(uv.y - lightCenterPoint.y);\n  }\n\n  float alpha = 1.0;\n\n  if (bool(cropAlpha)) {\n    alpha *= textureColor.a;\n  }\n\n  if (!bool(cropNotLight)) {\n    alpha *= step(dis, lightWidth * 0.5);\n\n  }\n\n  if (bool(enableGradient)) {\n    alpha *= 1.0 - dis / (lightWidth * 0.5);\n  }\n\n  vec4 finalLightColor = lightColor * alpha;\n  if (bool(enableMixColor)) {\n    finalLightColor += textureColor * textureColor.a;\n  }\n\n  return finalLightColor;\n}\n\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n\n  #if USE_TEXTURE\n  o *= texture2D(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n\n  o *= v_color;\n\n  ALPHA_TEST(o);\n\n  gl_FragColor = addLight(o, lightColor, lightCenterPoint, v_uv0, lightAngle, lightWidth);\n}\n"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  }\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nin vec4 v_color;\n\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n\nuniform LightArgs {\n\n  vec4 lightColor;\n\n  vec2 lightCenterPoint;\n\n  float lightAngle;\n\n  float lightWidth;\n\n  float enableGradient;\n\n  float cropAlpha;\n\n  float cropNotLight;\n\n  float enableMixColor;\n};\n\n/*\n添加光束\n*/\nvec4 addLight(vec4 textureColor, vec4 lightColor, vec2 lightCenterPoint, vec2 uv, float lightAngle, float lightWidth) {\n\n  float angleInRadians = radians(lightAngle);\n\n  float dis = 0.0;\n  if (mod(lightAngle, 180.0) != 0.0) {\n\n    float lightOffsetX = lightCenterPoint.x - ((1.0 - lightCenterPoint.y) / tan(angleInRadians));\n\n    float dx = lightOffsetX + (1.0 - uv.y) / tan(angleInRadians);\n\n    float offsetDis = abs(uv.x - dx);\n\n    dis = sin(angleInRadians) * offsetDis;\n  } else {\n    dis = abs(uv.y - lightCenterPoint.y);\n  }\n\n  float alpha = 1.0;\n\n  if (bool(cropAlpha)) {\n    alpha *= textureColor.a;\n  }\n\n  if (!bool(cropNotLight)) {\n    alpha *= step(dis, lightWidth * 0.5);\n\n  }\n\n  if (bool(enableGradient)) {\n    alpha *= 1.0 - dis / (lightWidth * 0.5);\n  }\n\n  vec4 finalLightColor = lightColor * alpha;\n  if (bool(enableMixColor)) {\n    finalLightColor += textureColor * textureColor.a;\n  }\n\n  return finalLightColor;\n}\n\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n\n  #if USE_TEXTURE\n  o *= texture(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n\n  o *= v_color;\n\n  ALPHA_TEST(o);\n\n  gl_FragColor = addLight(o, lightColor, lightCenterPoint, v_uv0, lightAngle, lightWidth);\n}\n"
      }
    }
  ],
  "subMetas": {}
}