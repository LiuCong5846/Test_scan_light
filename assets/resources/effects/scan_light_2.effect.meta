{
  "ver": "1.0.23",
  "uuid": "c14e5da0-617d-4a8f-bb1b-80bfb9debc79",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform vec4 cc_time;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\n\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nvarying vec4 v_time;\nvarying vec3 v_pos;\n\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n  v_time = cc_time;\n  v_pos = pos.xyz;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvarying vec4 v_color;\nvarying vec4 v_time;\nvarying vec3 v_pos;\n\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n\nuniform vec4 flowColor;\nuniform vec4 flowUVOffset;\nuniform float flowUVRotated;\nuniform float flowSpeed;\nuniform float flowWidth;\nuniform float flowK;\nuniform float flowCycle;\nuniform float flowStrength;\nuniform float isGlobal;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n\n  #if USE_TEXTURE\n  o *= texture2D(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n\n  o *= v_color;\n\n  vec2 uv;\n  uv.x = (v_uv0.x - flowUVOffset.x) / (flowUVOffset.z - flowUVOffset.x);\n  uv.y = (v_uv0.y - flowUVOffset.y) / (flowUVOffset.w - flowUVOffset.y);\n\n  if (flowUVRotated > 0.5) {\n    float tmp = uv.x;\n    uv.x = uv.y;\n    uv.y = 1.0 - tmp;\n  }\n\n  float t = mod(v_time.x + flowSpeed, flowCycle);\n  float b1 = t;\n  float b2 = b1 + flowWidth;\n\n  if (bool(isGlobal)) {\n    float tx = (v_pos.x + 1.0) * 0.5;\n    float ty = (v_pos.y + 1.0) * 0.5;\n\n    if ((ty > flowK * tx + b1) && (ty < flowK * tx + b2)) {\n      o.rgba += flowColor * o.rgba.a * flowStrength;\n    }\n  } else {\n    if ((uv.y > flowK * uv.x + b1) && (uv.y < flowK * uv.x + b2)) {\n      o.rgba += flowColor * o.rgba.a * flowStrength;\n    }\n  }\n\n  ALPHA_TEST(o);\n\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}\n"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\n\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nout vec4 v_time;\nout vec3 v_pos;\n\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\n\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n\n  v_color = a_color;\n  v_time = cc_time;\n  v_pos = pos.xyz;\n\n  gl_Position = pos;\n}\n",
        "frag": "\nprecision highp float;\n\n#if USE_ALPHA_TEST\n  \n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  }\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nuniform CCGlobal {\n  vec4 cc_time;\n\n  vec4 cc_screenSize;\n\n  vec4 cc_screenScale;\n\n  vec4 cc_nativeSize;\n\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n\n  vec4 cc_exposure;\n\n  vec4 cc_mainLitDir;\n\n  vec4 cc_mainLitColor;\n\n  vec4 cc_ambientSky;\n  vec4 cc_ambientGround;\n};\n\nin vec4 v_color;\nin vec4 v_time;\nin vec3 v_pos;\n\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\n\nuniform LightParams {\n  vec4 flowColor;\n  vec4 flowUVOffset;\n  float flowUVRotated;\n  float flowSpeed;\n  float flowWidth;\n  float flowK;\n  float flowCycle;\n  float flowStrength;\n  float isGlobal;\n}\n\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n\n  #if USE_TEXTURE\n  o *= texture(texture, v_uv0);\n    #if CC_USE_ALPHA_ATLAS_TEXTURE\n    o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n\n  o *= v_color;\n\n  vec2 uv;\n  uv.x = (v_uv0.x - flowUVOffset.x) / (flowUVOffset.z - flowUVOffset.x);\n  uv.y = (v_uv0.y - flowUVOffset.y) / (flowUVOffset.w - flowUVOffset.y);\n\n  if (flowUVRotated > 0.5) {\n    float tmp = uv.x;\n    uv.x = uv.y;\n    uv.y = 1.0 - tmp;\n  }\n\n  float t = mod(v_time.x + flowSpeed, flowCycle);\n  float b1 = t;\n  float b2 = b1 + flowWidth;\n\n  if (bool(isGlobal)) {\n    float tx = (v_pos.x + 1.0) * 0.5;\n    float ty = (v_pos.y + 1.0) * 0.5;\n\n    if ((ty > flowK * tx + b1) && (ty < flowK * tx + b2)) {\n      o.rgba += flowColor * o.rgba.a * flowStrength;\n    }\n  } else {\n    if ((uv.y > flowK * uv.x + b1) && (uv.y < flowK * uv.x + b2)) {\n      o.rgba += flowColor * o.rgba.a * flowStrength;\n    }\n  }\n\n  ALPHA_TEST(o);\n\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}\n"
      }
    }
  ],
  "subMetas": {}
}