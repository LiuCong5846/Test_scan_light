// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        # 自定义字段
        flowColor: { value: [1.0, 1.0, 1.0, 1.0], inspector: { type: color } }
        flowUVOffset: { value: [1.0, 1.0, 1.0, 1.0] }
        flowUVRotated: { value: 0.0 }
        flowSpeed: { value: 0.5 }
        flowWidth: { value: 0.02 }
        flowK: { value: -1 }
        flowCycle: { value: 0.5 }
        flowStrength: { value: 1.2 }
        isGlobal: { value: 1.0 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;
  out vec4 v_time;
  out vec3 v_pos;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;
    v_time = cc_time;
    v_pos = pos.xyz;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <cc-global>

  in vec4 v_color;
  in vec4 v_time;
  in vec3 v_pos;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform LightParams {
    vec4 flowColor;
    vec4 flowUVOffset;
    float flowUVRotated;
    float flowSpeed;
    float flowWidth;
    float flowK;
    float flowCycle;
    float flowStrength;
    float isGlobal;
  }

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
    o *= texture(texture, v_uv0);
      #if CC_USE_ALPHA_ATLAS_TEXTURE
      o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
      #endif
    #endif

    o *= v_color;

    vec2 uv;
    uv.x = (v_uv0.x - flowUVOffset.x) / (flowUVOffset.z - flowUVOffset.x);
    uv.y = (v_uv0.y - flowUVOffset.y) / (flowUVOffset.w - flowUVOffset.y);

    if (flowUVRotated > 0.5) {
      float tmp = uv.x;
      uv.x = uv.y;
      uv.y = 1.0 - tmp;
    }

    float t = mod(v_time.x + flowSpeed, flowCycle);
    float b1 = t;
    float b2 = b1 + flowWidth;

    if (bool(isGlobal)) {
      float tx = (v_pos.x + 1.0) * 0.5;
      float ty = (v_pos.y + 1.0) * 0.5;

      if ((ty > flowK * tx + b1) && (ty < flowK * tx + b2)) {
        o.rgba += flowColor * o.rgba.a * flowStrength;
      }
    } else {
      if ((uv.y > flowK * uv.x + b1) && (uv.y < flowK * uv.x + b2)) {
        o.rgba += flowColor * o.rgba.a * flowStrength;
      }
    }

    ALPHA_TEST(o);

    #if USE_BGRA
      gl_FragColor = o.bgra;
    #else
      gl_FragColor = o.rgba;
    #endif
  }
}%
