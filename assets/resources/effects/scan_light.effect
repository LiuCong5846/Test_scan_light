// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        # UV坐标偏移量
        UVoffset: { value: [1, 1, 1, 1] }
        # 光束颜色
        lightColor: { value: [1.0, 1.0, 1.0, 1.0], inspector: { type: color } }
        # 光束中心点坐标
        lightCenterPoint: { value: [0.2, 0.2] }
        # UV偏移角度
        UVrotated: { value: 0.0}
        # 光束倾斜角度
        lightAngle: { value: 36.0 }
        # 光束宽度
        lightWidth: { value: 0.2 }
        # 启用光束渐变
        enableGradient: { value: 1.0 }
        # 裁剪透明区域上的光
        cropAlpha: { value: 1.0 }
        # 裁剪非光束区域的光
        cropNotLight: { value: 1.0 }
        # 启用混合色
        enableMixColor: { value: 0.0 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform LightArgs {
    // uv坐标偏移量
    vec4 UVoffset;
    // 光束颜色
    vec4 lightColor;
    // 光束中心点坐标
    vec2 lightCenterPoint;
    // uv偏移角度
    float UVrotated;
    // 光束倾斜角度
    float lightAngle;
    // 光束宽度
    float lightWidth;
    // 启用光束渐变
    float enableGradient;
    // 裁剪透明区域的光
    float cropAlpha;
    // 裁剪非光束区域
    float cropNotLight;
    // 启用混合色
    float enableMixColor;
  };

  /*
  添加光束
  */
  vec4 addLight(vec4 textureColor, vec4 lightColor, vec2 lightCenterPoint, vec2 uv, float lightAngle, float lightWidth) {
    // 角度转化成弧度
    float angleInRadians = radians(lightAngle);

    // 角度 0 与 非0 不同处理
    float dis = 0.0;
    if (mod(lightAngle, 180.0) != 0.0) {
      // 计算光束中心线下方与X轴交点的X坐标
      // 1.0 - lightCenterPoint.y 是将转换为OpenGL坐标系，下文的 1.0 - y 类似 
      float lightOffsetX = lightCenterPoint.x - ((1.0 - lightCenterPoint.y) / tan(angleInRadians));

      // 以当前点画一条平行于X轴的线，假设此线和光束中心线相交的点为D点
      // 那么
      // D.y = uv0.y
      // D.x = lightOffsetX + D.y / tan(angle)
      float dx = lightOffsetX + (1.0 - uv.y) / tan(angleInRadians);

      // D 到当前 uv0 的距离就是
      // dis = |uv0.x - D.x|
      float offsetDis = abs(uv.x - dx);

      // 当前点到光束中心线的的垂直距离就好算了
      dis = sin(angleInRadians) * offsetDis;
    } else {
      dis = abs(uv.y - lightCenterPoint.y);
    }

    float alpha = 1.0;
    // 裁剪透明区域上的光
    if (bool(cropAlpha)) {
      alpha *= textureColor.a;
    }

    //裁减掉光束以外的uv
    if (!bool(cropNotLight)) {
      alpha *= step(dis, lightWidth * 0.5); // 屏蔽这句会裁掉光束以外的区域
    }

    // 启用渐变效果
    if (bool(enableGradient)) {
      alpha *= 1.0 - dis / (lightWidth * 0.5);
    }

    // 启用混合色
    vec4 finalLightColor = lightColor * alpha;
    if (bool(enableMixColor)) {
      finalLightColor += textureColor * textureColor.a;
    }

    return finalLightColor;
  }

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
    o *= texture(texture, v_uv0);
      #if CC_USE_ALPHA_ATLAS_TEXTURE
      o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
      #endif
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    vec2 uv;
    uv.x = (v_uv0.x - UVoffset.x) / (UVoffset.z - UVoffset.x);
    uv.y = (v_uv0.y - UVoffset.y) / (UVoffset.w - UVoffset.y);

    if (UVrotated > 0.5) {
      float tmp = uv.x;
      uv.x = uv.y;
      uv.y = 1.0 - tmp;
    }

    gl_FragColor = addLight(o, lightColor, lightCenterPoint, uv, lightAngle, lightWidth);
  }
}%
